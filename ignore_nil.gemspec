# Generated by jeweler
# DO NOT EDIT THIS FILE DIRECTLY
# Instead, edit Jeweler::Tasks in Rakefile, and run 'rake gemspec'
# -*- encoding: utf-8 -*-

Gem::Specification.new do |s|
  s.name = %q{ignore_nil}
  s.version = "1.0.3"

  s.required_rubygems_version = Gem::Requirement.new(">= 0") if s.respond_to? :required_rubygems_version=
  s.authors = ["Steven Soroka"]
  s.date = %q{2011-04-14}
  s.description = %q{
    The plugin is really rather simple; here's the ignore_nil method:

        def ignore_nil(&block)
          begin
            yield
          rescue NoMethodError, RuntimeError => e
            if (e.message =~ /You have a nil object when you didn't expect it/) ||
                (e.message =~ /undefined method `.*?' for nil:NilClass/) || (e.message =~ /^Called id for nil/)
              return nil
            else
              raise e
            end
          end
        end

    What's interesting about this is it catches both NoMethodError and RuntimeError, both of which
    can occur if a method unexpectedly returned nil and you called a method on it, but *ONLY* if
    the error message matches!  This means legitimate NoMethodError and RuntimeError messages will
    not be bothered by ignore_nil, and will still raise in your application as you expect.

    I've used this in a production application since about mid/late 2008, I'd consider it very stable.
    Feedback welcome!
    }
  s.email = %q{ssoroka78@gmail.com}
  s.extra_rdoc_files = [
    "LICENSE",
    "README.rdoc"
  ]
  s.files = [
    "LICENSE",
    "README.rdoc",
    "Rakefile",
    "VERSION",
    "ignore_nil.gemspec",
    "init.rb",
    "lib/ignore_nil.rb",
    "spec/ignore_nil_spec.rb",
    "spec/spec_helper.rb"
  ]
  s.homepage = %q{http://github.com/ssoroka/ignore_nil}
  s.require_paths = ["lib"]
  s.rubygems_version = %q{1.7.2}
  s.summary = %q{ignore_nil lets you happily ignore nil methods on long method chains.  Keeps code pretty and much safer than "rescue nil", since it only catches NoMethodError on nil objects}
  s.test_files = [
    "spec/ignore_nil_spec.rb",
    "spec/spec_helper.rb"
  ]

  if s.respond_to? :specification_version then
    s.specification_version = 3

    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then
    else
    end
  else
  end
end

